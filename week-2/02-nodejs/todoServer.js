/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs/promises');

const app = express();
app.use(bodyParser.json());

const todoDataFile = './todos.json';
let todoData = [];

// Middleware to save todo data to file after each request
const saveMiddleware = (req, res, next) => {
  fs.writeFile(todoDataFile, JSON.stringify(todoData, null, 2), 'utf8')
    .then()
    .catch((err) => {
      console.error(`Error writing todo data file: ${err.message}`);
      res.status(500).send('Internal Server Error');
    });
}

// Middleware to load todo data from file after each request
app.use((req, res, next) => {
  fs.readFile(todoDataFile, 'utf8')
  .then((data) => {
    todoData = JSON.parse(data);
    next();
  })
  .catch((err) => {
    console.error(`Error reading todo data file: ${err.message}`);
  });
});

// Helper function to find todo by ID
function findTodoById(id) {
  return todoData.find((todo) => todo.id === id);
}

// Routes
app.get('/todos', (req, res) => {
  res.status(200).json(todoData);
});

app.get('/todos/:id', (req, res) => {
  const id = parseInt(req.params.id, 10);
  const todo = findTodoById(id);

  if (todo) {
    res.status(200).json(todo);
  } else {
    res.status(404).send('Not Found');
  }
});

app.post('/todos', (req, res, next) => {
  const { title, description } = req.body;
  const id = todoData.length + 1;
  const newTodo = { id, title, description };
  todoData.push(newTodo);

  res.status(201).json({ id });
  next();
}, saveMiddleware);

app.put('/todos/:id', (req, res, next) => {
  const id = parseInt(req.params.id, 10);
  const todo = findTodoById(id);

  if (todo) {
    todo.title = req.body.title || todo.title;
    todo.description = req.body.description || todo.description;

    res.status(200).send('OK');
    next();
  } else {
    res.status(404).send('Not Found');
  }
}, saveMiddleware);

app.delete('/todos/:id', (req, res, next) => {
  const id = parseInt(req.params.id, 10);
  const index = todoData.findIndex((todo) => todo.id === id);

  if (index !== -1) {
    todoData.splice(index, 1);
    res.status(200).send('OK');
    next();
  } else {
    res.status(404).send('Not Found');
  }
}, saveMiddleware);

// Handle undefined routes
app.use((req, res) => {
  res.status(404).send('Not Found');
});

module.exports = app;